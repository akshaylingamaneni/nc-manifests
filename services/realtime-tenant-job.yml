apiVersion: batch/v1
kind: Job
metadata:
  name: supabase-realtime-add-tenant
  namespace: services
spec:
  backoffLimit: 1
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: curl
          image: curlimages/curl:8.10.1
          env:
            - name: API_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: supabase-secrets
                  key: SUPABASE_JWT_SECRET
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: supabase-secrets
                  key: SUPABASE_DB_PASSWORD
          command: ["sh", "-lc"]
          args:
            - |
              set -euo pipefail
              TENANT_NAME="realtime-dev"
              EXTERNAL_ID="realtime-dev"
              # Realtime API endpoint inside cluster
              URL="http://supabase-realtime.services.svc.cluster.local:4000/api/tenants"

              echo "Checking if tenant '$TENANT_NAME' exists..."
              # If GET fails or tenant not found, POST will create.
              # Perform POST to create/update tenant.
              cat > body.json <<EOF
              {
                "tenant": {
                  "name": "${TENANT_NAME}",
                  "external_id": "${EXTERNAL_ID}",
                  "jwt_secret": "${API_JWT_SECRET}",
                  "extensions": [
                    {
                      "type": "postgres_cdc_rls",
                      "settings": {
                        "db_name": "postgres",
                        "db_host": "supabase-db.services.svc.cluster.local",
                        "db_user": "postgres",
                        "db_password": "${DB_PASSWORD}",
                        "db_port": "5432",
                        "region": "ap-south-1",
                        "poll_interval_ms": 100,
                        "poll_max_record_bytes": 1048576,
                        "ip_version": 4
                      }
                    }
                  ]
                }
              }
              EOF

              # Create tenant; tolerate 409 conflict (already exists)
              set +e
              HTTP_CODE=$(curl -sS -o /tmp/resp.txt -w "%{http_code}" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${API_JWT_SECRET}" \
                -X POST "$URL" --data @body.json)
              RC=$?
              set -e
              cat /tmp/resp.txt || true
              if [ $RC -ne 0 ]; then
                echo "Request failed with code $RC"; exit $RC;
              fi
              if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "409" ]; then
                echo "Tenant ensured (HTTP $HTTP_CODE)."
              else
                echo "Unexpected HTTP $HTTP_CODE"; exit 1;
              fi

              echo "Done."

