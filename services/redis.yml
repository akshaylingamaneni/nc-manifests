apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: services
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-stack
  namespace: services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-stack
  template:
    metadata:
      labels:
        app: redis-stack
    spec:
      containers:
        - name: redis-stack
          image: redis/redis-stack:latest
          args:
            - redis-server
            - --protected-mode
            - "no"
            - --save
            - "900 1"
            - --save
            - "300 10"
            - --dir
            - /data
            - --loadmodule
            - /opt/redis-stack/lib/redisearch.so
            - --loadmodule
            - /opt/redis-stack/lib/redistimeseries.so
            - --loadmodule
            - /opt/redis-stack/lib/rejson.so
            - --maxmemory
            - 2gb
            - --maxmemory-policy
            - allkeys-lru
          ports:
            - containerPort: 6379
            - containerPort: 8001
          resources:
            requests:
              memory: "512Mi"
              cpu: "1000m"
            limits:
              memory: "2.5Gi"   # slightly >2gb to give Redis headroom
              cpu: "2000m"
          livenessProbe:
            tcpSocket: { port: 6379 }
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            tcpSocket: { port: 6379 }
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: services
spec:
  selector:
    app: redis-stack
  ports:
    - name: redis
      port: 6379
    - name: insight
      port: 8001
